import sqlite3
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards import kb_cancel, kb_main
keyboard = types.ReplyKeyboardMarkup(keyboard=kb_main,resize_keyboard=True)
keyboard_cn = types.ReplyKeyboardMarkup(keyboard=kb_cancel,resize_keyboard=True)
rt=Router()
class States(StatesGroup):
    nick_lk=State()
    bank_lk=State()
class Lk:
    def __init__(self,db):
        self.conn=sqlite3.connect(db)
        self.cursor=self.conn.cursor()
    def add_user(self,tg_id,nick,bank):
        self.cursor.execute("INSERT INTO 'users' ('tg_id','nick','bank') VALUES (?, ?, ?)",(tg_id,nick,bank,))
        return self.conn.commit()
    def get_nick(self,tg_id):
        result=self.cursor.execute("SELECT nick FROM 'users' WHERE tg_id=?",(tg_id,)).fetchone()
        return ''.join(result)
    def find(self,tg_id):
        result=self.cursor.execute("SELECT tg_id FROM 'users' WHERE tg_id=?",(tg_id,))
        return result.fetchall()
    def get_bank(self,tg_id):
        result=self.cursor.execute("SELECT bank FROM 'users' WHERE tg_id=?",(tg_id,)).fetchone()
        return ''.join(result)
    def close(self):
        self.conn.close()
lk=Lk("users.db")
@rt.message(F.text == "‚è™ –û—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)
@rt.message(F.text == "üÜî –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def kab(message: types.Message, state: FSMContext):
    if lk.find(message.from_user.id)==[]:
        await message.answer("–í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à NickName", reply_markup=keyboard_cn)
        await state.set_state(States.nick_lk)
    else:
        tg_id=message.from_user.id
        nick=lk.get_nick(tg_id)
        bank=lk.get_bank(tg_id)
        await message.answer(f"–í—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
                             f"–í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {tg_id}\n"
                             f"–í–∞—à NickName: {nick}\n"
                             f"–í–∞—à —Å—á—ë—Ç –≤ –±–∞–Ω–∫–µ: {bank}")
@rt.message(States.nick_lk)
async def nick(message: types.Message, state: FSMContext):
    await state.update_data(nick=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞")
    await state.set_state(States.bank_lk)
@rt.message(States.bank_lk)
async def bank(message: types.Message, state: FSMContext):
    await state.update_data(bank=message.text)
    user_data = await state.get_data()
    lk.add_user(message.from_user.id,user_data['nick'],user_data['bank'])
    await state.clear()
    await message.answer("–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", reply_markup=keyboard)